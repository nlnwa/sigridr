// Code generated by protoc-gen-go. DO NOT EDIT.
// source: worker.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WorkRequest struct {
	QueuedSeed *QueuedSeed `protobuf:"bytes,1,opt,name=queued_seed,json=queuedSeed" json:"queued_seed,omitempty"`
}

func (m *WorkRequest) Reset()                    { *m = WorkRequest{} }
func (m *WorkRequest) String() string            { return proto.CompactTextString(m) }
func (*WorkRequest) ProtoMessage()               {}
func (*WorkRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *WorkRequest) GetQueuedSeed() *QueuedSeed {
	if m != nil {
		return m.QueuedSeed
	}
	return nil
}

type WorkReply struct {
	QueuedSeed *QueuedSeed `protobuf:"bytes,1,opt,name=queued_seed,json=queuedSeed" json:"queued_seed,omitempty"`
	Count      int32       `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	MaxId      string      `protobuf:"bytes,3,opt,name=max_id,json=maxId" json:"max_id,omitempty"`
	SinceId    string      `protobuf:"bytes,4,opt,name=since_id,json=sinceId" json:"since_id,omitempty"`
	RateLimit  *RateLimit  `protobuf:"bytes,15,opt,name=rate_limit,json=rateLimit" json:"rate_limit,omitempty"`
}

func (m *WorkReply) Reset()                    { *m = WorkReply{} }
func (m *WorkReply) String() string            { return proto.CompactTextString(m) }
func (*WorkReply) ProtoMessage()               {}
func (*WorkReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *WorkReply) GetQueuedSeed() *QueuedSeed {
	if m != nil {
		return m.QueuedSeed
	}
	return nil
}

func (m *WorkReply) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *WorkReply) GetMaxId() string {
	if m != nil {
		return m.MaxId
	}
	return ""
}

func (m *WorkReply) GetSinceId() string {
	if m != nil {
		return m.SinceId
	}
	return ""
}

func (m *WorkReply) GetRateLimit() *RateLimit {
	if m != nil {
		return m.RateLimit
	}
	return nil
}

func init() {
	proto.RegisterType((*WorkRequest)(nil), "api.WorkRequest")
	proto.RegisterType((*WorkReply)(nil), "api.WorkReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Worker service

type WorkerClient interface {
	Do(ctx context.Context, in *WorkRequest, opts ...grpc.CallOption) (*WorkReply, error)
}

type workerClient struct {
	cc *grpc.ClientConn
}

func NewWorkerClient(cc *grpc.ClientConn) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) Do(ctx context.Context, in *WorkRequest, opts ...grpc.CallOption) (*WorkReply, error) {
	out := new(WorkReply)
	err := grpc.Invoke(ctx, "/api.Worker/Do", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Worker service

type WorkerServer interface {
	Do(context.Context, *WorkRequest) (*WorkReply, error)
}

func RegisterWorkerServer(s *grpc.Server, srv WorkerServer) {
	s.RegisterService(&_Worker_serviceDesc, srv)
}

func _Worker_Do_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Do(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Worker/Do",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Do(ctx, req.(*WorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Worker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Do",
			Handler:    _Worker_Do_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "worker.proto",
}

func init() { proto.RegisterFile("worker.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x14, 0x84, 0x71, 0x4b, 0x02, 0x79, 0xa9, 0x5a, 0x64, 0x81, 0x14, 0x3a, 0x45, 0x99, 0xb2, 0x10,
	0xa1, 0xf0, 0x03, 0x58, 0x58, 0x2a, 0xb1, 0x60, 0x86, 0x8e, 0x91, 0x89, 0x9f, 0x84, 0xd5, 0xa4,
	0x76, 0x1c, 0x5b, 0xb4, 0xff, 0x8b, 0x1f, 0x88, 0xfa, 0x22, 0x50, 0x57, 0xb6, 0xbb, 0xef, 0xec,
	0x77, 0xd2, 0xc1, 0xe2, 0xcb, 0xb8, 0x1d, 0xba, 0xca, 0x3a, 0xe3, 0x0d, 0x9f, 0x4b, 0xab, 0xd7,
	0x8b, 0xb1, 0xfd, 0xc4, 0x5e, 0x4e, 0xa8, 0x78, 0x86, 0x74, 0x6b, 0xdc, 0x4e, 0xe0, 0x10, 0x70,
	0xf4, 0xfc, 0x11, 0xd2, 0x21, 0x60, 0x40, 0xd5, 0x8c, 0x88, 0x2a, 0x63, 0x39, 0x2b, 0xd3, 0x7a,
	0x55, 0x49, 0xab, 0xab, 0x37, 0xe2, 0xef, 0x88, 0x4a, 0xc0, 0xf0, 0xa7, 0x8b, 0x6f, 0x06, 0xc9,
	0x74, 0xc1, 0x76, 0xc7, 0xff, 0xff, 0xe7, 0xb7, 0x10, 0xb5, 0x26, 0xec, 0x7d, 0x36, 0xcb, 0x59,
	0x19, 0x89, 0xc9, 0xf0, 0x3b, 0x88, 0x7b, 0x79, 0x68, 0xb4, 0xca, 0xe6, 0x39, 0x2b, 0x13, 0x11,
	0xf5, 0xf2, 0xb0, 0x51, 0xfc, 0x1e, 0xae, 0x47, 0xbd, 0x6f, 0xf1, 0x14, 0x5c, 0x52, 0x70, 0x45,
	0x7e, 0xa3, 0xf8, 0x03, 0x80, 0x93, 0x1e, 0x9b, 0x4e, 0xf7, 0xda, 0x67, 0x2b, 0x2a, 0x5e, 0x52,
	0xb1, 0x90, 0x1e, 0x5f, 0x4f, 0x54, 0x24, 0xee, 0x57, 0xd6, 0x35, 0xc4, 0x5b, 0x9a, 0x86, 0x97,
	0x30, 0x7b, 0x31, 0xfc, 0x86, 0x9e, 0x9e, 0x4d, 0xb1, 0x5e, 0x9e, 0x11, 0xdb, 0x1d, 0x8b, 0x8b,
	0x8f, 0x98, 0x26, 0x7b, 0xfa, 0x09, 0x00, 0x00, 0xff, 0xff, 0x48, 0xac, 0x0c, 0x44, 0x55, 0x01,
	0x00, 0x00,
}
